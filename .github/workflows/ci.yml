name: CI and Release

on:
  push:
    branches: [main]
    tags:
      - '*.*.*'
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build on multiple OS
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            extension: ''
            python-version: '3.11.9'
          - os: windows-latest
            extension: '.exe'
            python-version: '3.11.9'
            architecture: 'x64'
          - os: macos-latest
            extension: ''
            python-version: '3.11.9'
            architecture: 'x64'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture || '' }}
          check-latest: true

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate || .\venv\Scripts\activate
          pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt

      - name: Run tests with coverage
        run: |
          source venv/bin/activate || .\venv\Scripts\activate
          pip install coverage pytest pytest-asyncio
          coverage run -m pytest tests/*
          coverage report
          coverage xml -o coverage.xml
          coverage report | grep "TOTAL" | awk '{print $$4}' > coverage.txt

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Build executable with PyInstaller
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          source venv/bin/activate || .\venv\Scripts\activate
          pyinstaller --onefile --distpath dist/${{ matrix.os }} --name eagle${{ matrix.extension }} main.py

      - name: Upload binary artifact
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ format('eagle-{0}-latest{1}', matrix.os, github.ref_name != 'main' && format('-v{0}', github.ref_name) || '') }}
          path: dist/${{ matrix.os }}/eagle${{ matrix.extension }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Download Ubuntu artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ format('eagle-ubuntu-latest{0}', github.ref_name != 'main' && format('-v{0}', github.ref_name) || '') }}
          path: dist/ubuntu/

      - name: Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ format('eagle-windows-latest{0}', github.ref_name != 'main' && format('-v{0}', github.ref_name) || '') }}
          path: dist/windows/

      - name: Download macOS artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ format('eagle-macos-latest{0}', github.ref_name != 'main' && format('-v{0}', github.ref_name) || '') }}
          path: dist/macos/

      - name: Update Release and Upload New Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          files: |
            dist/ubuntu/eagle-ubuntu-latest${{ github.ref_name != 'main' && format('-v{0}', github.ref_name) || '' }}
            dist/windows/eagle-windows-latest${{ github.ref_name != 'main' && format('-v{0}', github.ref_name) || '' }}.exe
            dist/macos/eagle-macos-latest${{ github.ref_name != 'main' && format('-v{0}', github.ref_name) || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
