name: CI and Release

on:
  push:
    branches: [main]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11.10']
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          make install

      - name: Run lint
        run: make lint

      - name: Run formatter
        run: make format

      - name: Run tests with coverage
        run: make test-coverage

      - name: Display coverage percentage
        run: |
          echo "Test coverage:"
          cat coverage.txt

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Extract version from tag
        id: get_version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "VERSION=${VERSION}" >> $GITHUB_ENV
          else
            echo "VERSION=dev" >> $GITHUB_ENV
          fi

      - name: Build executable
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            make build
          else
            echo "Skipping build as this is not a tagged commit."
          fi

      - name: Upload binary artifact
        if: startsWith(github.ref, 'refs/tags/') && success()
        uses: actions/upload-artifact@v3
        with:
          name: eagle-${{ matrix.os }}-v${{ env.VERSION }}
          path: dist/*

      - name: Build and Upload to PyPI
        if: startsWith(github.ref, 'refs/tags/') && success()
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          make build
          python -m pip install --upgrade pip setuptools wheel twine
          python setup.py sdist bdist_wheel
          twine upload dist/*
        
  release:
    name: Create Release
    needs: build-and-test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')  
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          files: |
            artifacts/eagle-ubuntu-latest-v${{ env.VERSION }}/eagle
            artifacts/eagle-windows-latest-v${{ env.VERSION }}/eagle.exe
            artifacts/eagle-macos-latest-v${{ env.VERSION }}/eagle
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
